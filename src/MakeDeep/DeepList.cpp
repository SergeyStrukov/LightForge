/* DeepList.cpp */
//----------------------------------------------------------------------------------------
//
//  Project: LightForge 1.00
//
//  License: Boost Software License - Version 1.0 - August 17th, 2003
//
//            see http://www.boost.org/LICENSE_1_0.txt or the local copy
//
//  Copyright (c) 2023 Sergey Strukov. All rights reserved.
//
//----------------------------------------------------------------------------------------

#include <stdexcept>
#include <fstream>

#include "DeepList.h"

namespace App {

/* class DeepList */

TargetKind DeepList::GetKind(String fileName)
 {
  std::ifstream inp(fileName);

  if( !inp.is_open() )
    {
     std::cout << "Cannot open file " << fileName << std::endl ;

     throw std::runtime_error("no such file");
    }

  inp.exceptions(std::ifstream::badbit);

  String tag;

  inp >> tag ;

  if( tag==GetTag(TargetLib) ) return TargetLib;
  if( tag==GetTag(TargetExe) ) return TargetExe;
  if( tag==GetTag(TargetPregen) ) return TargetPregen;

  std::cout << "Bad type tag: " << tag << std::endl ;

  throw std::runtime_error("bad type tag");
 }

void DeepList::add(String path)
 {
  if( findSet.insert(path).second )
    {
     Path dir(path);

     BaseList ext(dir/"BaseList.txt");

     list.emplace_back(path,std::move(ext.getList()),GetKind(dir/"TargetKind.txt"));
    }
 }

DeepList::DeepList()
 {
  list.reserve(BigReserve);

  add(FullBaseList::GetSelf());

  for(size_t ind=0; ind<list.size() ;ind++)
    {
     for(const String &str : list[ind].bases )
       {
        add(str);
       }
    }
 }

DeepList::~DeepList()
 {
 }

void DeepList::order()
 {
  // TODO
 }

void DeepList::buildMakeDeep()
 {
  std::ofstream out("Makefile-deep");

  out << "# Makefile-deep AUTOGENERATED, DON'T EDIT\n\n" ;

  out << "deep:\n" ;

  for(size_t ind=list.size(); ind-- ;)
    {
     const String &str=list[ind].path;

     out << "\t$(MAKE) -C " << str << "\n" ;
    }

  out.close();

  if( !out )
    {
     throw std::runtime_error("'Makefile-deep' creation error");
    }
 }

} // namespace App

